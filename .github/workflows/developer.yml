name: Dev deployment
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [closed]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - name: 🏗 Setup repo
        uses: actions/checkout@v4

      - name: 🏗 Setup node ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      - name: 🏗 Install dependencies
        run: yarn

      - name: 📦 Lint with eslint
        run: yarn run lint

      - name: 📦 Build project
        run: yarn run build

  deploy-dev:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: 🏗 Setup repo
        uses: actions/checkout@v4

      - name: 🏗 Install Vercel CLI
        run: npm install --global vercel@latest

      - name: 🏗 Pull preview vercel environment
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: 📦 Build app artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: 📦 Deploy app artifacts to vercel in preview
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}

  tag-release:
    runs-on: ubuntu-latest
    needs: [deploy-dev]
    steps:
      - name: Checkout
        if: github.event.pull_request.merged == true
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version
        if: github.event.pull_request.merged == true
        id: version
        run: |
          NEW_VERSION=$(node -p 'require("./package.json").version')
          echo "version=v$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create a git tag
        if: github.event.pull_request.merged == true
        run: git tag ${{ steps.version.outputs.version }} && git push --tags
